syntax = "proto3";

package cosmos.accounts.defaults.multisig.v1;

import "google/protobuf/any.proto";

option go_package = "cosmossdk.io/x/accounts/multisig/v1";

// MsgInit is used to initialize a multisig account.
message MsgInit {
  // pub_key defines the pubkey bytes of the multisig members.
  repeated bytes pub_keys = 1;

  repeated uint64 weights = 2;

  Config Config = 3;
}

message Config {
  // algo defines the algorithm used for the multisig. secp256k1, bls12_381, etc.
  string algo = 1;

  int64 threshold = 2;

  int64 quorum = 3;

  // voting_period is the duration in seconds for the voting period.
  int64 voting_period = 4;

  // revote defines if participants can change their vote.
  bool revote = 5;

  // early_execution defines if the multisig can be executed before the voting period ends.
  bool early_execution = 6;
}

message Proposal {
  string   title                        = 1;
  string   summary                      = 2;
  repeated google.protobuf.Any messages = 3;
}

// MsgInitResponse is the response returned after base account initialization.
// This is empty.
message MsgInitResponse {}

message MsgCreateProposal {
  Proposal proposal = 1;

  // append optional signatures
  repeated bytes signatures = 2;
}

// MsgSwapPubKey is used to change the pubkey for the account.
message MsgModifyParticipants {
  repeated Operation operations = 1;
}

enum OperationType {
  OPERATION_TYPE_UNSPECIFIED = 0;
  OPERATION_TYPE_ADD         = 1;
  OPERATION_TYPE_REMOVE      = 2;
  OPERATION_TYPE_UPDATE      = 3;
}

message Operation {
  OperationType type    = 1; // add, remove, update
  bytes         pub_key = 2;
  uint64        weight  = 3;
}

// MsgSwapPubKeyResponse is the response for the MsgSwapPubKey message.
// This is empty.
message MsgModifyParticipantsResponse {}

// QuerySequence is the request for the account sequence.
message QuerySequence {}

// QuerySequenceResponse returns the sequence of the account.
message QuerySequenceResponse {
  // sequence is the current sequence of the account.
  uint64 sequence = 1;
}

message QueryConfig {}

// QuerySequenceResponse returns the sequence of the account.
message QueryConfigResponse {
  // pub_key defines the pubkey bytes of the multisig members.
  repeated bytes pub_keys = 1;

  repeated uint64 weights = 2;

  Config Config = 3;
}
